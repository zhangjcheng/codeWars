Instructions:
For building the encrypted string:
Take every 2nd char from the string, then the other chars, that are not every 2nd char, and concat them as new String.
Do this n times!

Examplesï¼š
"This is a test!", 1 -> "hsi  etTi sats!"
"This is a test!", 2 -> "hsi  etTi sats!" -> "s eT ashi tist!"

Sample Tests:
Test.describe('Basic Tests')
Test.assert_equals(encrypt("This is a test!", 0), "This is a test!")
Test.assert_equals(encrypt("This is a test!", 1), "hsi  etTi sats!")
Test.assert_equals(encrypt("This is a test!", 2), "s eT ashi tist!")
Test.assert_equals(encrypt("This is a test!", 3), " Tah itse sits!")
Test.assert_equals(encrypt("This is a test!", 4), "This is a test!")
Test.assert_equals(encrypt("This is a test!", -1), "This is a test!")
Test.assert_equals(encrypt("This kata is very interesting!", 1), "hskt svr neetn!Ti aai eyitrsig")

Test.assert_equals(decrypt("This is a test!", 0), "This is a test!")
Test.assert_equals(decrypt("hsi  etTi sats!", 1), "This is a test!")
Test.assert_equals(decrypt("s eT ashi tist!", 2), "This is a test!")
Test.assert_equals(decrypt(" Tah itse sits!", 3), "This is a test!")
Test.assert_equals(decrypt("This is a test!", 4), "This is a test!")
Test.assert_equals(decrypt("This is a test!", -1), "This is a test!")
Test.assert_equals(decrypt("hskt svr neetn!Ti aai eyitrsig", 1), "This kata is very interesting!")

Test.assert_equals(encrypt("", 0), "")
Test.assert_equals(decrypt("", 0), "")
Test.assert_equals(encrypt(None, 0), None)
Test.assert_equals(decrypt(None, 0), None)



B:
def decrypt(text, n):
    if text in ("", None):
        return text
    
    ndx = len(text) // 2

    for i in range(n):
        a = text[:ndx]
        b = text[ndx:]
        text = "".join(b[i:i+1] + a[i:i+1] for i in range(ndx + 1))
    return text



def encrypt(text, n):
    for i in range(n):
        text = text[1::2] + text[::2]
    return text

T: