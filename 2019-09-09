Description:
There is a queue for the self-checkout tills at the supermarket. Your task is write a function to calculate the total time required for all the customers to check out!

input
customers: an array of positive integers representing the queue. Each integer represents a customer, and its value is the amount of time they require to check out.
n: a positive integer, the number of checkout tills.
output
The function should return an integer, the total time required.

Important
Please look at the examples and clarifications below, to ensure you understand the task correctly :)

Examples
queueTime([5,3,4], 1)
// should return 12
// because when there is 1 till, the total time is just the sum of the times

queueTime([10,2,3,3], 2)
// should return 10
// because here n=2 and the 2nd, 3rd, and 4th people in the 
// queue finish before the 1st person has finished.

queueTime([2,3,10], 2)
// should return 12
Clarifications
There is only ONE queue serving many tills, and
The order of the queue NEVER changes, and
The front person in the queue (i.e. the first element in the array/list) proceeds to a till as soon as it becomes free.
N.B. You should assume that all the test input will be valid, as specified above.

P.S. The situation in this kata can be likened to the more-computer-science-related idea of a thread pool, with relation to running multiple processes at the same time: https://en.wikipedia.org/wiki/Thread_pool
Transform:
设计一个方法传入两个参数一个队列的正整数数组（每个元素代表每个队列处理的时间），一个是可以并行处理的个数
求队列在并行情况下处理完需要多久

考察内容：
数组、循环、控制流、基本语言能力

Solution:
import java.util.Arrays;
public class Solution {

    public static int solveSuperMarketQueue(int[] customers, int n) {
        if (customers.length == 0) {
            return 0;
        }
        int count = 0;
        while (true) {
            int index = -1;
            for (int i = 0; i < customers.length; i ++) {
                // 记录第一个非0索引
                if (customers[i] > 0) {
                    index = i;
                    break;
                }
            }
            if (index == -1) {
                return count;
            }
            for (int j = 0; j < n; j ++) {
                if (index + j < customers.length) {
                    customers[index + j] = customers[index + j] - 1;
                }
            }
            count ++;
        }
    }
    
}

Sample Tests:
import org.junit.Test;
import static org.junit.Assert.assertEquals;
import org.junit.runners.JUnit4;

public class SolutionTest {
	@Test
	public void testNormalCondition() {
		assertEquals(9, Solution.solveSuperMarketQueue(new int[] { 2, 2, 3, 3, 4, 4 }, 2));
	}

	@Test
	public void testEmptyArray() {
		assertEquals(0, Solution.solveSuperMarketQueue(new int[] {}, 1));
	}

	@Test
	public void testSingleTillManyCustomers() {
		assertEquals(15, Solution.solveSuperMarketQueue(new int[] { 1, 2, 3, 4, 5 }, 1));
	}

}