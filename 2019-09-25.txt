Description:
Well met with Fibonacci bigger brother, AKA Tribonacci.

As the name may already reveal, it works basically like a Fibonacci, but summing the last 3 (instead of 2) numbers of the sequence to generate the next. And, worse part of it, regrettably I won't get to hear non-native Italian speakers trying to pronounce it :(

So, if we are to start our Tribonacci sequence with [1, 1, 1] as a starting input (AKA signature), we have this sequence:

[1, 1 ,1, 3, 5, 9, 17, 31, ...]
But what if we started with [0, 0, 1] as a signature? As starting with [0, 1] instead of [1, 1] basically shifts the common Fibonacci sequence by once place, you may be tempted to think that we would get the same sequence shifted by 2 places, but that is not the case and we would get:

[0, 0, 1, 1, 2, 4, 7, 13, 24, ...]
Well, you may have guessed it by now, but to be clear: you need to create a fibonacci function that given a signature array/list, returns the first n elements - signature included of the so seeded sequence.

Signature will always contain 3 numbers; n will always be a non-negative number; if n == 0, then return an empty array (except in C return NULL) and be ready for anything else which is not clearly specified ;)

If you enjoyed this kata more advanced and generalized version of it can be found in the Xbonacci kata

*[Personal thanks to Professor Jim Fowler on Coursera for his awesome classes that I really recommend to any math enthusiast and for showing me this mathematical curiosity too with his usual contagious passion :)]*

Example：
assertArrayEquals(new double []{0,1,1,2,4,7,13,24,44,81}, variabonacci.tribonacci(new double []{0,1,1},10), precision);

Transform:
设计一个方法传入一个长度为3的数组及需要输出的位数，输出以该数组为基础输出从第四位开始都是前三位数字的和的位数长度数组

考察内容：
基本语言能力

Solution:
package com.newretail.vendor.constant;

/**
 * @author zhangjincheng
 * @ClassName Xbonacci
 * @Description 数组设计
 * @createDate 2019/10/8
 * @updatePerson
 * @updateDate
 */
public class Xbonacci {

    public static double[] tribonacci(double[] s, int n) {
        // hackonacci me

        double[] result = new double[n];
        double next = 0;
        //初始化结果和计算赋值第一个下一个值
        for (int i = 0; i < s.length && i < n; i++) {
            result[i] = s[i];
            next += s[i];
        }
        if (n < s.length) {
            return result;
        }

        result[s.length] = next;

        for (int i = s.length + 1; i < n; i++) {
            next = next + result[i - 1] - result[i - s.length -1];
            result[i] = next;
        }

        return result;
    }

    public static void main(String[] args) {
        System.out.println(tribonacci(new double []{1,1,1},10 ));
    }
}



Sample Tests:
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;

public class XbonacciTest {
  private Xbonacci variabonacci;
  
  @Before
  public void setUp() throws Exception {
    variabonacci = new Xbonacci();
  }

  @After
  public void tearDown() throws Exception {
    variabonacci = null;
  }
  
  private double precision = 1e-10;
  
  @Test
  public void basicTests() {
    assertArrayEquals(new double []{1,1,1,3,5,9,17,31,57,105}, variabonacci.tribonacci(new double []{1,1,1},10), precision);
    assertArrayEquals(new double []{0,0,1,1,2,4,7,13,24,44}, variabonacci.tribonacci(new double []{0,0,1},10), precision);
    assertArrayEquals(new double []{0,1,1,2,4,7,13,24,44,81}, variabonacci.tribonacci(new double []{0,1,1},10), precision);
  }
}


最佳实践：

import java.util.Arrays;

public class Xbonacci {
  public double[] tribonacci(double[] s, int n) {

      double[] tritab=Arrays.copyOf(s, n);
      for(int i=3;i<n;i++){
        tritab[i]=tritab[i-1]+tritab[i-2]+tritab[i-3];
      }
      return tritab;

    }
}